username: johndeo8789
password: L9IBihfhwJjYLtEy


mongodb+srv://johndeo8789:L9IBihfhwJjYLtEy@quiz-cluster.hbwk1we.mongodb.net/?retryWrites=true&w=majority&appName=Quiz-Cluster

connection-string:
mongodb+srv://johndeo8789:<password>@quiz-cluster.hbwk1we.mongodb.net/



const { MongoClient, ServerApiVersion } = require('mongodb');
const uri = "mongodb+srv://johndeo8789:L9IBihfhwJjYLtEy@quiz-cluster.hbwk1we.mongodb.net/?retryWrites=true&w=majority&appName=Quiz-Cluster";

// Create a MongoClient with a MongoClientOptions object to set the Stable API version
const client = new MongoClient(uri, {
  serverApi: {
    version: ServerApiVersion.v1,
    strict: true,
    deprecationErrors: true,
  }
});

async function run() {
  try {
    // Connect the client to the server	(optional starting in v4.7)
    await client.connect();
    // Send a ping to confirm a successful connection
    await client.db("admin").command({ ping: 1 });
    console.log("Pinged your deployment. You successfully connected to MongoDB!");
  } finally {
    // Ensures that the client will close when you finish/error
    await client.close();
  }
}
run().catch(console.dir);

======================
Fix bug;
rename typo ------ otp -> OTP in 3 files

```
Method:POST
http://localhost:3000/auth

Request:
 {
     "name":"asif",
     "email":"johndeo8789@gmail.com",
     "password":"Aasif@999",
     "confirmPassword":"Aasif@999"
 }
Status-Code:: 401 - Unauthorized
Response:
{
    "status": "error",
    "message": "email not sent",
    "data": {}
}
```
err:
Error: getaddrinfo ENOTFOUND <SERVICE_PROVIDER>
    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:118:26) {
  errno: -3008,
  code: 'EDNS',
  syscall: 'getaddrinfo',
  hostname: '<SERVICE_PROVIDER>',
  command: 'CONN'
}
401 email not sent

npm run start:ts

{
    "status": "success",
    "message": "OTP has sent on your email. Please Verify",
    "data": {
        "email": "aasif.githu@gmail.com",
        "token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6ImFhc2lmLmdpdGh1QGdtYWlsLmNvbSIsImlhdCI6MTcxMTY5MjI2MX0.-Zx4Rsvtxa1AXw7AET4xsc790YwbItJ8JbvHpcsO0K0"
    }
}



8'April'2024
----------------------
aasif.github@gmail.com
Aasif@999
--------------------
There are several new features you could consider adding to enhance a quiz system. Here are some ideas:

User Authentication: Implement user authentication to allow users to create accounts, track their progress, and view their quiz history.

Leaderboard: Include a leaderboard to display top scores or rankings, motivating users to compete and improve.

Multiplayer Mode: Introduce a multiplayer mode where users can compete against each other in real-time quizzes.

Randomized Questions: Add a feature to randomize the order of questions and answer choices to prevent users from memorizing quiz patterns.

Timer: Include a timer feature to add a sense of urgency to quizzes, allowing users to see how quickly they can complete the quiz.

Hints and Explanations: Provide hints or explanations for questions to help users understand the correct answers and learn from their mistakes.

Difficulty Levels: Allow users to choose between different difficulty levels for quizzes, catering to users with varying levels of expertise.

Image or Multimedia Support: Incorporate images, videos, or audio clips into questions to make quizzes more engaging and interactive.

Accessibility Features: Ensure your quiz system is accessible to users with disabilities by adding features such as screen reader compatibility and keyboard navigation.

Feedback System: Implement a feedback system where users can provide input on quiz questions, report errors, or suggest improvements.

Social Sharing: Allow users to share their quiz results or achievements on social media platforms, increasing engagement and attracting new users.

Customization Options: Provide customization options for users to create their own quizzes, select specific categories or topics, and personalize the quiz experience.

Progress Tracking: Enable users to track their progress over time, showing their improvement and areas where they may need to focus more attention.

Offline Mode: Develop an offline mode that allows users to download quizzes for later use when they don't have an internet connection.

Integration with Learning Management Systems (LMS): Integrate your quiz system with popular learning management systems used in educational institutions or corporate training environments.

These are just a few ideas to consider. Depending on your target audience and the purpose of your quiz system, you may choose to implement some or all of these features to create a more comprehensive and engaging user experience.


npm i redis
npm install @types/redis

npm uninstall @type/redis
to check-redis:
redis-cli

------------------

multer
shape
// how to set image in postman.
https://stackoverflow.com/questions/39660074/post-image-data-using-postman

-------
to revert all change to your last git commit.
git checkout .

Use git checkout . or git restore . to discard uncommitted changes to all files in your working directory.
For a specific file, use git checkout <filename>.

1.add redis
what if quiz is update, it will remain send old records?

2. bug fix at function 'submitExam' in Controller/exam.ts --- 405 You can't submit your own quiz!
createdBy attribute was missing..

GET /api/v1/quizzes?search={keyword}&category={category}&difficulty={difficulty}

3. Pagination
4. sorting - sort by difficulty
5. search by quiz name
6. added new attribute- tags - CodingQuizQuestion - history - Islamic


 npm run start:dev 

   // "redis": "^4.6.13",

           // "@types/redis": "^4.0.11",